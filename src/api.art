;===============================================
; Claude.ai.art
;
; Claude API wrapper
; for Arturo
;
; MIT License
; (c) 2024 Yanis Zafirópulos
;==========================================================
; @file: src/api.art
;==========================================================

;--------------------------
; Type Definitions 
;--------------------------

define :message [
    init: method [role :string content :string][
        \role: role
        \content: content

        if not? in? \role ["user" "assistant"] ->
            throw.as: valueError "Message role must be 'user' or 'assistant'"
    ]
]

;--------------------------
; Helper Functions
;--------------------------

createMessage: function [role :string content :string][
    ;; description: « Create a new message object
    ;; returns: :message
    to :message [role content]
]

;--------------------------
; Main implementation
;--------------------------

define :claudeAPI [
    init: method [key :string][
        if null? key [ 
            throw.as: valueError "API key is required"
        ]
        if not? prefix? key "sk-" [
            throw.as: valueError "Invalid API key format - must start with 'sk-'"
        ]

        \apiKey: key
        \baseUrl: "https://api.anthropic.com"
        \apiVersion: "2023-06-01"
        \model: "claude-3-sonnet-20240229"
        \maxTokens: 4096

        ; default parameters
        \defaultTemp: 0.7
        \defaultTopP: 1.0
    ]

    chat: method [blk :block][
        ;; description: « Send a chat request to Claude's API
        ;; options: [
        ;;     model: :string « specify Claude model to use (default: claude-3-sonnet)
        ;;     system: :string « specify system message
        ;;     temperature: :floating « set temperature (0.0-1.0)
        ;;     maxTokens: :integer « set max tokens for response
        ;;     topP: :floating « set top_p value (0.0-1.0)
        ;;     topK: :integer « set top_k value
        ;; ]
        ;; returns: :dictionary
        ;; example: {
        ;;     claude: to :claudeAPI ["sk-..."]!
        ;;     result: claude\chat [
        ;;         to :message ["user" "What is 2+2?"]
        ;;     ]
        ;;     print result\content
        ;; }

        ; Get parameters from attributes or defaults
        model: (attr 'model) ?? \model
        system: attr 'system
        temperature: (attr 'temperature) ?? \defaultTemp
        maxTokens: (attr 'maxTokens) ?? \maxTokens
        topP: (attr 'topP) ?? \defaultTopP
        topK: attr 'topK

        messages: @ blk
        ensure -> is? [:message] messages

        ; Build request body
        body: #[
            model: model
            messages: messages
            max_tokens: maxTokens
            temperature: temperature
            top_p: topP
        ]

        if not? null? system [
            set body 'system system
        ]

        if not? null? topK [
            set body 'top_k topK
        ]

        ; Make API request
        result: request.post 
            .json
            .headers: #[
                "x-api-key": \apiKey
                "anthropic-version": \apiVersion
                "content-type": "application/json"
            ]
            \baseUrl ++ "/v1/messages"
            body

        if result\status <> 200 [
            throw.as: runtimeError join @[
                "API request failed with status" 
                result\status ":" 
                read.json result\body
            ]
        ]

        return read.json result\body
    ]

    ask: method [question :string][
        ;; description: « Ask question directly to Claude API and get answer
        ;; returns: :string
        ;; example: {
        ;;     claude: to :claudeAPI ["sk-..."]!
        ;;     print claude\ask "What is the capital of Sweden?" 
        ;;     ; The capital of Sweden is Stockholm.
        ;; }
        response: \chat [
            createMessage "user" question
        ]

        unless key? response 'content ->
            throw "Something went wrong"

        content: first response\content

        unless key? content 'type ->
            throw "Something went wrong"

        unless content\type = "text" ->
            throw "Non-text response generated"

        unless key? content 'text ->
            throw "Something went wrong"

        return content\text
    ]

    setModel: method [model :string][
        ;; description: « Set default model
        \model: model
    ]

    setMaxTokens: method [tokens :integer][
        ;; description: « Set default max tokens
        \maxTokens: tokens
    ]

    setTemperature: method [temp :floating][
        ;; description: « Set default temperature
        \defaultTemp: temp
    ]

    setTopP: method [topP :floating][
        ;; description: « Set default top_p
        \defaultTopP: topP
    ]
]
